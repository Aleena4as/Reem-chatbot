[{"/Volumes/Data/React/lexus/src/index.js":"1","/Volumes/Data/React/lexus/src/App.js":"2","/Volumes/Data/React/lexus/src/components/ChatBot/ChatBot.js":"3","/Volumes/Data/React/lexus/src/components/ToggleButton/ToggleButton.js":"4","/Volumes/Data/React/lexus/src/components/TextBox/DummyTextBox/DummyTextBox.js":"5","/Volumes/Data/React/lexus/src/components/LandingScreen/LandingScreen.js":"6","/Volumes/Data/React/lexus/src/components/ChatScreen/ChatScreen.js":"7","/Volumes/Data/React/lexus/src/env.js":"8","/Volumes/Data/React/lexus/src/utils/Function.js":"9","/Volumes/Data/React/lexus/src/components/TextBox/TextBox.js":"10","/Volumes/Data/React/lexus/src/components/Typing/Typing.js":"11","/Volumes/Data/React/lexus/src/components/MainMenu/MainMenu.js":"12","/Volumes/Data/React/lexus/src/components/BotHandler/BotHandler.js":"13","/Volumes/Data/React/lexus/src/components/ChatScreen/UserReply/UserReply.js":"14","/Volumes/Data/React/lexus/src/components/Button/Button.js":"15","/Volumes/Data/React/lexus/src/components/DynamicForm/QuickButtons/QuickButtons.js":"16","/Volumes/Data/React/lexus/src/components/DynamicForm/Maps/Maps.js":"17","/Volumes/Data/React/lexus/src/components/DynamicForm/DynamicForm.js":"18","/Volumes/Data/React/lexus/src/components/DynamicForm/Maps/MapsField/MapsField.js":"19","/Volumes/Data/React/lexus/src/components/Profile/Profile.js":"20","/Volumes/Data/React/lexus/src/components/Feedback/Feedback.js":"21","/Volumes/Data/React/lexus/src/components/DynamicForm/List/List.js":"22","/Volumes/Data/React/lexus/src/components/AutoDirect/AutoDirect.js":"23","/Volumes/Data/React/lexus/src/components/DynamicForm/OTP/Otp.js":"24","/Volumes/Data/React/lexus/src/components/DynamicForm/AutoSuggest/AutoSuggest.js":"25","/Volumes/Data/React/lexus/src/components/Carousel/Carousel.js":"26","/Volumes/Data/React/lexus/src/components/ChatScreen/BotReply/BotReply.js":"27","/Volumes/Data/React/lexus/src/components/DynamicForm/Submit/Submit.js":"28","/Volumes/Data/React/lexus/src/components/DynamicForm/Username/Username.js":"29","/Volumes/Data/React/lexus/src/components/DynamicForm/Gender/Gender.js":"30","/Volumes/Data/React/lexus/src/components/DynamicForm/Email/Email.js":"31","/Volumes/Data/React/lexus/src/components/DynamicForm/PhoneNumber/PhoneNumber.js":"32","/Volumes/Data/React/lexus/src/components/DynamicForm/Date/Date.js":"33","/Volumes/Data/React/lexus/src/components/Header/Header.js":"34","/Volumes/Data/React/lexus/src/serviceWorker.js":"35"},{"size":550,"mtime":1609662576515,"results":"36","hashOfConfig":"37"},{"size":124,"mtime":1609662576485,"results":"38","hashOfConfig":"37"},{"size":3918,"mtime":1609662576489,"results":"39","hashOfConfig":"37"},{"size":5777,"mtime":1609662576513,"results":"40","hashOfConfig":"37"},{"size":459,"mtime":1609662576512,"results":"41","hashOfConfig":"37"},{"size":3215,"mtime":1609662576507,"results":"42","hashOfConfig":"37"},{"size":21187,"mtime":1609662576491,"results":"43","hashOfConfig":"37"},{"size":103,"mtime":1609662576515,"results":"44","hashOfConfig":"37"},{"size":3955,"mtime":1609662576550,"results":"45","hashOfConfig":"37"},{"size":1877,"mtime":1609662576512,"results":"46","hashOfConfig":"37"},{"size":230,"mtime":1609662576514,"results":"47","hashOfConfig":"37"},{"size":1800,"mtime":1609662576511,"results":"48","hashOfConfig":"37"},{"size":4309,"mtime":1609662576486,"results":"49","hashOfConfig":"37"},{"size":656,"mtime":1609662576493,"results":"50","hashOfConfig":"37"},{"size":429,"mtime":1609662576487,"results":"51","hashOfConfig":"37"},{"size":1508,"mtime":1609662576504,"results":"52","hashOfConfig":"37"},{"size":7073,"mtime":1609662576501,"results":"53","hashOfConfig":"37"},{"size":3251,"mtime":1609662576499,"results":"54","hashOfConfig":"37"},{"size":2661,"mtime":1609662576502,"results":"55","hashOfConfig":"37"},{"size":3099,"mtime":1609662576511,"results":"56","hashOfConfig":"37"},{"size":1839,"mtime":1609662576506,"results":"57","hashOfConfig":"37"},{"size":1828,"mtime":1609662576501,"results":"58","hashOfConfig":"37"},{"size":470,"mtime":1609662576486,"results":"59","hashOfConfig":"37"},{"size":6652,"mtime":1609662576503,"results":"60","hashOfConfig":"37"},{"size":2185,"mtime":1609662576497,"results":"61","hashOfConfig":"37"},{"size":3420,"mtime":1609662576488,"results":"62","hashOfConfig":"37"},{"size":843,"mtime":1609662576490,"results":"63","hashOfConfig":"37"},{"size":5418,"mtime":1609662576505,"results":"64","hashOfConfig":"37"},{"size":1136,"mtime":1609662576505,"results":"65","hashOfConfig":"37"},{"size":498,"mtime":1609662576500,"results":"66","hashOfConfig":"37"},{"size":1112,"mtime":1609662576499,"results":"67","hashOfConfig":"37"},{"size":1598,"mtime":1609662576504,"results":"68","hashOfConfig":"37"},{"size":1265,"mtime":1609662576498,"results":"69","hashOfConfig":"37"},{"size":845,"mtime":1609662576506,"results":"70","hashOfConfig":"37"},{"size":5003,"mtime":1609662576549,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cbxie3",{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"76"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"76"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"76"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"76"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"76"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"76"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"76"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"76"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"76"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"76"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"76"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Volumes/Data/React/lexus/src/index.js",[],"/Volumes/Data/React/lexus/src/App.js",[],["155","156"],"/Volumes/Data/React/lexus/src/components/ChatBot/ChatBot.js",["157"],"import React, { useState } from \"react\";\n// Library\nimport { Tween } from \"react-gsap\";\n\n// Components\nimport LandingScreen from \"../LandingScreen\";\nimport ChatScreen from \"../ChatScreen\";\nimport ToggleButton from \"../ToggleButton/ToggleButton\";\nimport DummyTextBox from \"../TextBox/DummyTextBox/DummyTextBox\";\n\nexport default () => {\n    const [landingScreen, setLandingScreen] = useState(true);\n    const [showScreen, setShowScreen] = useState(false);\n    const [showPayLoad, setshowPayLoad] = useState(false);\n    const [payLoad, setpayLoad] = useState(\"\");\n    const [showCloseIcon, setshowCloseIcon] = useState(false);\n    const [newMenu, setnewMenu] = useState(false);\n\n    /**\n     * Displaying Either Landing Screen or ChatScreen\n     *\n     * Depending on the Click of the button\n     *\n     */\n    const showLandingScreen = bool => {\n        setLandingScreen(bool);\n    };\n\n    /**\n     * Shows and Hides ChatBot on Click of the button Bottom Menu Button\n     *\n     * Toggles ChatBot\n     * Shows Landing Screen\n     * Toggles ChatIcon by Setting by setting the NewMainMenu with Bool Value\n     *\n     * @param {bool}\n     *\n     */\n    const toggleShowScreen = bool => {\n        setShowScreen(bool);\n        setshowCloseIcon(bool);\n        setnewMenu(bool);\n        setLandingScreen(true);\n    };\n\n    /**\n     * Ending the Chat Session and going back to the LandScreen\n     *\n     * Showing Landing Screen\n     * Showing ChatBot\n     *\n     */\n    const endChatSession = () => {\n        setLandingScreen(true);\n        setShowScreen(true);\n        setshowPayLoad(false);\n    };\n\n    /**\n     * Closing the Chat Bot on End Session from ChatScreen.js\n     *\n     */\n    const closeChatBot = () => {\n        setShowScreen(false);\n        setshowPayLoad(false);\n        setnewMenu(false);\n        setshowCloseIcon(false);\n    };\n\n    /**\n     * Sending Payload Dynamically Depending on the Click of the 4 boxed on the LandingScreen\n     *\n     * Hiding Landing Screen\n     *\n     * @param payload\n     */\n\n    const sendingPayLoad = payload => {\n        setpayLoad(payload);\n        setshowPayLoad(true);\n        showLandingScreen(false);\n    };\n\n    const newMainMenu = bool => {\n        setnewMenu(bool);\n    };\n\n    /**\n     * This shows either the Landing Screen or the Chat Screen depending on the bool value\n     *\n     * default : {true}\n     */\n    const toggleScreens = () => {\n        if (landingScreen) return <LandingScreen showLandingScreen={showLandingScreen} sendingPayLoad={sendingPayLoad} />;\n        else\n            return (\n                <ChatScreen\n                    endChatSession={endChatSession}\n                    closeChatBot={closeChatBot}\n                    payLoad={payLoad}\n                    showPayLoad={showPayLoad}\n                />\n            );\n    };\n\n    return (\n        <div className=\"chatbot-container\">\n            <Tween from={{ y: \"80px\", opacity: 0 }}>\n                {showScreen ? (\n                    <div className=\"screen-holder\">\n                        <div id=\"minimise\" onClick={() => toggleShowScreen(false)}>\n                            <img src={require(\"../../public/images/close.svg\")} alt=\"\" />\n                        </div>\n                        {toggleScreens()}\n\n                        {landingScreen && <DummyTextBox showLandingScreen={showLandingScreen} />}\n                    </div>\n                ) : null}\n            </Tween>\n\n            <Tween from={{ y: \"-80px\", delay: 0.5, opacity: 0 }}>\n                {showScreen ? (\n                    <img className=\"chat-curve\" src={require(\"../../public/images/chat-curve.svg\")} alt=\"\" />\n                ) : null}\n            </Tween>\n\n            <ToggleButton\n                toggleShowScreen={toggleShowScreen}\n                showCloseIcon={showCloseIcon}\n                newMainMenu={newMainMenu}\n                newMenu={newMenu}\n            />\n        </div>\n    );\n};\n","/Volumes/Data/React/lexus/src/components/ToggleButton/ToggleButton.js",["158"],"import React from \"react\";\nimport { Tween } from \"react-gsap\";\nimport { TweenMax } from \"gsap\";\n\nexport default props => {\n    /**\n     * Triggering function in ChatBot.js to Show / Hide the chatScreen\n     *\n     * @param toggleBool\n     * @param botBool\n     */\n    const toggleBot = () => {\n        let open = document.querySelector(\".open-btn\");\n        TweenMax.to(open, 0.1, {\n            y: -20,\n            opacity: 0\n        });\n\n        props.newMainMenu(true);\n\n        setTimeout(() => {\n            document.querySelector(\".rounded-menu\").classList.add(\"test\");\n        }, 500);\n    };\n\n    /**\n     * Open ChatBot which is ( ChatScreen.js) on Click of the Chat Icon\n     *\n     */\n\n    const openChatBot = () => {\n        props.toggleShowScreen(true);\n        closeMainMenuOnChat();\n    };\n\n    /**\n     * Close Main Menu when ChatScreen is visible\n     *\n     */\n\n    const closeMainMenuOnChat = () => {\n        let rounded_menu = document.querySelector(\".rounded-menu\");\n        TweenMax.to(rounded_menu, 1, {\n            x: 100,\n            scale: 0.5,\n            opacity: 0\n        });\n    };\n\n    const closeChatScreen = () => {\n        props.toggleShowScreen(false);\n        props.newMainMenu(false);\n    };\n\n    /**\n     * New Main Menu To Display the Items\n     *\n     */\n\n    const closeNewMainMenu = () => {\n        let rounded_menu = document.querySelector(\".rounded-menu\");\n        TweenMax.to(rounded_menu, 1, {\n            x: 100,\n            scale: 0.5,\n            opacity: 0\n        });\n        setTimeout(() => {\n            props.newMainMenu(false);\n        }, 1400);\n    };\n\n    /**\n     * Open Whatsapp / Book Appoinments\n     *\n     */\n\n    const openExternalLink = url => {\n        window.open(url, \"_blank\");\n    };\n\n    return (\n        <div className=\"toggle-button-container\">\n            {props.newMenu ? (\n                <Tween\n                    from={{\n                        css: {\n                            width: \"54px\",\n                            height: \"54px\",\n                            bottom: \"15px\",\n                            right: \"15px\",\n                            opacity: 0\n                        }\n                    }}\n                >\n                    <div className=\"rounded-menu\">\n                        <Tween\n                            from={{\n                                css: { top: \"113px\", left: \"200px\" },\n                                scaleY: 5,\n                                delay: 0.5\n                            }}\n                        >\n                            <button className=\"btn-top\" onClick={openChatBot}>\n                                <img src={require(\"../../public/images/chatIcon.svg\")} alt=\"\" />\n                                <span>Chat with us</span>\n                            </button>\n                        </Tween>\n                        <Tween\n                            from={{\n                                css: { bottom: \"100px\", left: \"200px\" },\n                                delay: 0.5\n                            }}\n                        >\n                            <button\n                                className=\"btn-center\"\n                                onClick={() =>\n                                    openExternalLink(\n                                        \"https://api.whatsapp.com/send?phone=971582976331&text=Hi&source=&data=\"\n                                    )\n                                }\n                            >\n                                <img src={require(\"../../public/images/whatsapp.svg\")} alt=\"\" />\n                                <span>Whatsapp</span>\n                            </button>\n                        </Tween>\n                        <Tween\n                            from={{\n                                css: { bottom: \"110px\", left: \"200px\" },\n                                delay: 0.5\n                            }}\n                        >\n                            <button\n                                className=\"btn-bottom\"\n                                onClick={() =>\n                                    openExternalLink(\n                                        \"https://www.camaliclinic.com/schedule-an-appointment/\"\n                                    )\n                                }\n                            >\n                                <img src={require(\"../../public/images/appoin.svg\")} alt=\"\" />\n                                <span>Appointments</span>\n                            </button>\n                        </Tween>\n                        <Tween\n                            from={{\n                                css: { opacity: 0 },\n                                delay: 1\n                            }}\n                        >\n                            <button className=\"close\" onClick={closeNewMainMenu}>\n                                <img src={require(\"../../public/images/menuClose.svg\")} alt=\"\" />\n                            </button>\n                        </Tween>\n                    </div>\n                </Tween>\n            ) : (\n                <Tween from={{ y: \"100\", opacity: 0, delay: 0.5 }}>\n                    <button className=\"open-btn\" onClick={toggleBot}>\n                        <img src={require(\"../../public/images/message.svg\")} alt=\"\" />\n                    </button>\n                </Tween>\n            )}\n\n            {props.showCloseIcon ? (\n                <Tween from={{ y: \"100\", opacity: 0, delay: 0.5 }}>\n                    <button className=\"close-btn\" onClick={closeChatScreen}>\n                        <img src={require(\"../../public/images/close.svg\")} alt=\"\" />\n                    </button>\n                </Tween>\n            ) : null}\n        </div>\n    );\n};\n","/Volumes/Data/React/lexus/src/components/TextBox/DummyTextBox/DummyTextBox.js",["159"],"import React from \"react\";\nimport { Tween } from \"react-gsap\";\n\nexport default props => {\n    return (\n        <div className=\"textbox-container\">\n            <Tween from={{ y: \"100px\", opacity: 0, delay: 2 }}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Let's start a conversation\"\n                    onClick={() => props.showLandingScreen(false)}\n                />\n            </Tween>\n        </div>\n    );\n};\n","/Volumes/Data/React/lexus/src/components/LandingScreen/LandingScreen.js",[],"/Volumes/Data/React/lexus/src/components/ChatScreen/ChatScreen.js",[],"/Volumes/Data/React/lexus/src/env.js",[],"/Volumes/Data/React/lexus/src/utils/Function.js",[],"/Volumes/Data/React/lexus/src/components/TextBox/TextBox.js",["160"],"import React, { useState } from \"react\";\nimport { Tween } from \"react-gsap\";\nimport Button from \"../Button/Button\";\n\nexport default props => {\n    const [showSendButton, setShowSendButton] = useState(false);\n\n    /**\n     * Checking if there is data in input\n     *\n     * Only Shows the Send button if there is data in the input\n     *\n     */\n    const handlePress = () => {\n        if (props.input.length >= 1) {\n            setShowSendButton(true);\n        } else {\n            setShowSendButton(false);\n        }\n    };\n\n    return (\n        <Tween from={{ y: \"100px\", opacity: 0, delay: 0.8 }}>\n            <div className=\"textbox-container\">\n                <input\n                    type=\"text\"\n                    value={props.input}\n                    onKeyUp={handlePress}\n                    autoComplete=\"off\"\n                    name=\"input\"\n                    placeholder=\"Type here...\"\n                    onKeyPress={event => props.sendMessageOnEnter(event)}\n                    onChange={event => props.handleChange(event, \"input\")}\n                    disabled={props.input_disable === \"false\" ? false : true}\n                />\n\n                <div className=\"button-container\">\n                    {showSendButton ? (\n                        <Tween from={{ x: \"20px\", opacity: 0 }}>\n                            <button className=\"send-btn\" onClick={props.sendMessage}>\n                                <img src={require(\"../../public/images/send.svg\")} alt=\"\" />\n                            </button>\n                        </Tween>\n                    ) : null}\n\n                    <Button className=\"hamburger-menu\" onClick={props.mainMenu}>\n                        <div></div>\n                        <div></div>\n                        <div></div>\n                    </Button>\n                </div>\n            </div>\n        </Tween>\n    );\n};\n","/Volumes/Data/React/lexus/src/components/Typing/Typing.js",["161"],"import React from \"react\";\n\nexport default () => (\n    <div className=\"typing-container\">\n        <div className=\"ml-1 typing-indicator\">\n            <span />\n            <span />\n            <span />\n        </div>\n    </div>\n);\n","/Volumes/Data/React/lexus/src/components/MainMenu/MainMenu.js",["162"],"import React from \"react\";\nimport { Tween } from \"react-gsap\";\nimport Button from \"../Button/Button\";\n\nexport default props => {\n    const liveAgent = () => {\n        props.sendQuickMessage(\"/live_agent\", \"\");\n        props.mainMenu();\n    };\n\n    return (\n        <div className=\"mainmenu-container\">\n            <Tween from={{ y: \"10px\", opacity: 0, delay: 0.1 }}>\n                <div className=\"btn-1\">\n                    <Button className=\"circle-btn\" onClick={props.resetMainMenu}>\n                        <img src={require(\"../../public/images/Group 83.svg\")} alt=\"\" />\n                    </Button>\n\n                    <div className=\"tooltip\">Main Menu</div>\n                </div>\n            </Tween>\n            <Tween from={{ y: \"8px\", opacity: 0, delay: 0.4 }}>\n                <div className=\"btn-2\">\n                    <Button className=\"circle-btn\" onClick={liveAgent}>\n                        <img src={require(\"../../public/images/Group 84.svg\")} alt=\"\" />\n                    </Button>\n                    <div className=\"tooltip\">Live Agent</div>\n                </div>\n            </Tween>\n            <Tween from={{ y: \"5px\", opacity: 0, delay: 0.8 }}>\n                <div className=\"btn-3\">\n                    <Button className=\"circle-btn\" onClick={props.resetChatSession}>\n                        <img src={require(\"../../public/images/Group.svg\")} alt=\"\" />\n                        <div className=\"tooltip\">Restart</div>\n                    </Button>\n                </div>\n            </Tween>\n            <Tween from={{ y: \"10px\", opacity: 0, delay: 1, rotate: \"45deg\" }} title=\"Restart\">\n                <Button className=\"circle-btn close\" onClick={props.mainMenu}>\n                    Close\n                </Button>\n            </Tween>\n        </div>\n    );\n};\n","/Volumes/Data/React/lexus/src/components/BotHandler/BotHandler.js",["163"],"import React from \"react\";\n// Components\nimport BotReply from \"../ChatScreen/BotReply\";\nimport Carousel from \"../Carousel\";\nimport QuickButtons from \"../DynamicForm/QuickButtons/QuickButtons\";\nimport Otp from \"../DynamicForm/OTP/Otp\";\nimport List from \"../DynamicForm/List/List\";\nimport DynamicForm from \"../DynamicForm/DynamicForm\";\nimport AutoSuggest from \"../DynamicForm/AutoSuggest/AutoSuggest\";\nimport MapsField from \"../DynamicForm/Maps/MapsField/MapsField\";\nimport Maps from \"../DynamicForm/Maps/Maps\";\nimport Feedback from \"../Feedback/Feedback\";\nimport Profile from \"../Profile/Profile\";\nimport AutoDirect from \"../AutoDirect/AutoDirect\";\n\nexport default props => {\n    const { type = \"\", feedback = \"false\", quick_replies = false, location = \"\", link = \"\" } = props.chat;\n\n    const googleMapURL =\n        \"https://maps.googleapis.com/maps/api/js?key=AIzaSyATMJCJoBvcmVYKU6GMtckJgmS7ztPqhlU&v=3.exp&libraries=places&region=ae&avoid=tolls\";\n\n    if (link && quick_replies && type === \"message\" && feedback === \"false\") {\n        return <QuickButtons chat={props.chat} sendQuickMessage={props.sendQuickMessage} link={link} />;\n    }\n    if (quick_replies && type === \"message\" && feedback === \"false\") {\n        return <QuickButtons chat={props.chat} sendQuickMessage={props.sendQuickMessage} />;\n    }\n\n    if (type === \"daynamic_form\") {\n        return (\n            <DynamicForm\n                chat={props.chat}\n                input={props}\n                handleChange={props.handleChange}\n                sendQuickMessage={props.sendQuickMessage}\n                handlePhone={props.handlePhone}\n                handleDate={props.handleDate}\n                handleGender={props.handleGender}\n            />\n        );\n    }\n    if (type === \"carousel\" && location === \"true\") {\n        return <Carousel chat={props.chat} sendQuickMessage={props.sendQuickMessage} />;\n    }\n\n    if (type === \"carousel\" && location === \"false\") {\n        return <Profile chat={props.chat} sendQuickMessage={props.sendQuickMessage} />;\n    }\n    if (type === \"list\") {\n        return <List items={props.chat} sendQuickMessage={props.sendQuickMessage} />;\n    }\n\n    if (type === \"otp\") {\n        return (\n            <Otp input={props} sendQuickMessage={props.sendQuickMessage} handleChange={props.handleChange} type={type} />\n        );\n    }\n    if (type === \"daynamic_search_bar\") {\n        return (\n            <AutoSuggest\n                chat={props.chat}\n                sendQuickMessage={props.sendQuickMessage}\n                scrollToBottom={props.scrollToBottom}\n            />\n        );\n    }\n\n    if (type === \"get_user_location\") {\n        return (\n            <MapsField\n                keys={props.keys}\n                userLocation={props.userLocation}\n                handleChangeUserLocation={props.handleChangeUserLocation}\n                googleMapURL={googleMapURL}\n                handleSelectedLocation={props.handleSelectedLocation}\n                loadingElement={<div style={{ height: `100%` }} />}\n                containerElemet={<div style={{ height: `400px` }} />}\n            />\n        );\n    }\n\n    if (type === \"get_map_direction\") {\n        return (\n            <Maps\n                coordinates={props.chat}\n                googleMapURL={googleMapURL}\n                loadingElement={<div style={{ height: `100%` }} />}\n                containerElement={\n                    <div\n                        className={\"maps\"}\n                        style={{\n                            marginBottom: \"10px\",\n                            position: \"absolute\",\n                            left: \"0\",\n                            top: \"0\",\n                            width: \"100%\",\n                            height: \"100%\",\n                            zIndex: \"9999\"\n                        }}\n                    />\n                }\n                mapElement={<div style={{ height: `100%` }} />}\n            />\n        );\n    }\n    if (quick_replies && type === \"message\" && feedback === \"true\") {\n        return <Feedback chat={props.chat} sendQuickMessage={props.sendQuickMessage} />;\n    }\n\n    if (type === \"new_link_payment\") {\n        return <AutoDirect chat={props.chat} sendQuickMessage={props.sendQuickMessage} />;\n    }\n\n    return <BotReply chat={props.chat} />;\n};\n","/Volumes/Data/React/lexus/src/components/ChatScreen/UserReply/UserReply.js",["164"],"import React from \"react\";\nimport moment from \"moment\";\nimport { Tween } from \"react-gsap\";\nimport { decodeString } from \"../../../utils/Function\";\nimport _ from \"lodash\";\n\nexport default props => {\n    const currentTime = new moment().format(\"h:mm\");\n    return (\n        <div className=\"user-reply-container\">\n            <Tween from={{ x: \"50px\", opacity: 0 }}>\n                <div className=\"user-reply\">{decodeString(_.get(props.chat, \"text\", \"\"))}</div>\n                <span>\n                    <img src={require(\"../../../public/images/Group 45.svg\")} alt=\"\" /> {currentTime}\n                </span>\n            </Tween>\n        </div>\n    );\n};\n","/Volumes/Data/React/lexus/src/components/Button/Button.js",["165"],"import React from \"react\";\nimport _ from \"lodash\";\n\n/**\n * Generic Function\n *\n * Reusable for all the Components\n *\n */\n\nexport default props => {\n    return (\n        <button\n            onClick={props.onClick}\n            className={_.get(props, \"className\", \"\")}\n            id={_.get(props, \"id\", \"\")}\n            disabled={_.get(props, \"disabled\", false)}\n        >\n            {props.children}\n        </button>\n    );\n};\n","/Volumes/Data/React/lexus/src/components/DynamicForm/QuickButtons/QuickButtons.js",["166"],"import React, { useState } from \"react\";\nimport { Tween } from \"react-gsap\";\nimport BotReply from \"../../ChatScreen/BotReply/BotReply\";\n// import { TimelineMax, CSSPlugin } from \"gsap\";\nexport default (props) => {\n    const [activeLink, setactiveLink] = useState(null);\n    const [isDisabled, setisDisabled] = useState(false);\n\n    const sendButton = (payload, title, index) => () => {\n        props.sendQuickMessage(payload, title);\n        setactiveLink(index);\n        setisDisabled(true);\n        if (title === \"Continue\") {\n            console.log(\"Redirect\");\n            window.open(`${props.link}`, \"_blank\");\n        }\n    };\n\n    return (\n        <div className=\"quick-buttons-container\">\n            <Tween from={{ x: \"-50px\", opacity: 0 }}>\n                <BotReply chat={props.chat} />\n            </Tween>\n            <Tween from={{ y: \"20px\", opacity: 0, delay: 1 }}>\n                {props.chat.quick_replies.map((data, index) => (\n                    <button\n                        className={`quick-reply-btn ${isDisabled && index !== activeLink ? \"disabled-button\" : \"\"} ${\n                            index === activeLink ? \"activeLink\" : \"\"\n                        } `}\n                        key={index}\n                        onClick={sendButton(data.payload, data.title, index)}\n                        disabled={isDisabled}\n                    >\n                        {data.title}\n                    </button>\n                ))}\n            </Tween>\n        </div>\n    );\n};\n","/Volumes/Data/React/lexus/src/components/DynamicForm/Maps/Maps.js",[],"/Volumes/Data/React/lexus/src/components/DynamicForm/DynamicForm.js",[],"/Volumes/Data/React/lexus/src/components/DynamicForm/Maps/MapsField/MapsField.js",[],"/Volumes/Data/React/lexus/src/components/Profile/Profile.js",[],"/Volumes/Data/React/lexus/src/components/Feedback/Feedback.js",[],"/Volumes/Data/React/lexus/src/components/DynamicForm/List/List.js",["167"],"import React, { Component } from \"react\";\nimport { Tween } from \"react-gsap\";\nimport { get } from \"lodash\";\nexport default class List extends Component {\n   state = {\n      isDisabled: false,\n      activeLink: null,\n   };\n\n   /**\n    * Selecting the Categories\n    *\n    */\n   selectCategories = (event, payload, label) => {\n      const { isDisabled } = this.state;\n      this.setState(\n         {\n            isDisabled: true,\n            activeLink: label,\n         },\n         () => {\n            if (!isDisabled) {\n               this.props.sendQuickMessage(payload, label);\n            } else {\n               event.stopPropagation();\n            }\n         }\n      );\n   };\n\n   render() {\n      const { activeLink, isDisabled } = this.state;\n      return (\n         <Tween from={{ x: \"-35px\", opacity: 0 }}>\n            <div className=\"list-container\">\n               <div className=\"items-section\">\n                  {this.props.items.data.map((data, index) => (\n                     <button\n                        className={`items ${isDisabled && data.label !== activeLink ? \"disabled-button\" : \"\"} ${\n                           data.label === activeLink ? \"activeLink\" : \"\"\n                        }`}\n                        key={index}\n                        onClick={(event) => this.selectCategories(event, data.buttons[0].payload, data.label)}\n                        disabled={isDisabled}\n                     >\n                        <img src={require(`../../../public/images/Doctor.svg`)} alt=\"\" />\n                        <div className=\"names\">\n                           <h2>{data.label}</h2>\n                           <p>{data.description}</p>\n                        </div>\n                     </button>\n                  ))}\n               </div>\n            </div>\n         </Tween>\n      );\n   }\n}\n","/Volumes/Data/React/lexus/src/components/AutoDirect/AutoDirect.js",[],"/Volumes/Data/React/lexus/src/components/DynamicForm/OTP/Otp.js",[],"/Volumes/Data/React/lexus/src/components/DynamicForm/AutoSuggest/AutoSuggest.js",[],"/Volumes/Data/React/lexus/src/components/Carousel/Carousel.js",["168","169","170"],"import React, { useState, useEffect, useCallback } from \"react\";\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport { Tween } from \"react-gsap\";\nimport Button from \"../Button/Button\";\n\n/**\n * Carousel For Direction\n *\n */\n\nexport default (props) => {\n   const [clientXonMouseDown, setclientXonMouseDown] = useState(null);\n   const [clientYonMouseDown, setclientYonMouseDown] = useState(null);\n   const [isDisabled, setisDisabled] = useState(false);\n   const [activeLink, setactiveLink] = useState(null);\n   let slider;\n\n   /**\n    * Storing the Mouse Position on MousePress\n    *\n    * @param {*} event\n    */\n   const handleOnMouseDown = (event) => {\n      setclientXonMouseDown(event.clientX);\n      setclientYonMouseDown(event.clientY);\n\n      event.preventDefault(); // stops weird link dragging effect\n   };\n\n   /**\n    * Checking if the Mouse is Dragged or Clicked\n    *\n    * If Dragged then the click event will not be triggered\n    *\n    * @param {*} event\n    * @param {*} payload\n    * @param {*} title\n    *\n    */\n   const handleOnClick = (event, payload, title) => {\n      event.stopPropagation();\n      if (clientXonMouseDown !== event.clientX || clientYonMouseDown !== event.clientY) {\n         event.preventDefault();\n      } else {\n         if (isDisabled) {\n            event.stopPropagation();\n         } else {\n            props.sendQuickMessage(payload, title);\n            setisDisabled(true);\n            setactiveLink(title);\n         }\n      }\n   };\n\n   const SlickNextClick = () => {\n      slider.slickNext();\n   };\n\n   const SlickPrevClick = () => {\n      slider.slickPrev();\n   };\n\n   const settings = {\n      dots: false,\n      arrows: false,\n      infinite: false,\n      speed: 300,\n      edgeFriction: 0,\n      slidesToShow: 2.5,\n      slidesToScroll: 1,\n      draggable: true,\n      swipeToSlide: true,\n      touchMove: true,\n   };\n\n   return (\n      <Tween from={{ x: \"30px\", opacity: 0, delay: 0.5 }}>\n         <div className=\"carousel-container\">\n            <Slider ref={(c) => (slider = c)} edgeFriction={0} {...settings}>\n               {props.chat.data.map((data, index) => (\n                  <div\n                     className={`figure ${props.chat.data.length === 1 ? \"newClass\" : \"\"} ${\n                        isDisabled && data.label !== activeLink ? \"disabled-button\" : \"\"\n                     }`}\n                     key={index}\n                     onMouseDown={handleOnMouseDown}\n                     onClick={(event) => handleOnClick(event, data.buttons[0].payload, data.label)}\n                  >\n                     <img className=\"image\" src={require(`../../public/images/${data.image}.png`)} alt=\"\" />\n                     <section className=\"details\">\n                        <h1>{data.label}</h1>\n                     </section>\n                  </div>\n               ))}\n            </Slider>\n            <div className=\"button-section\">\n               <Button onClick={SlickPrevClick} disabled={isDisabled}>\n                  <img src={require(\"../../public/images/left-active.svg\")} alt=\"\" />\n               </Button>\n               <Button onClick={SlickNextClick} disabled={isDisabled}>\n                  <img src={require(\"../../public/images/right-active.svg\")} id=\"right-arrow\" alt=\"\" />\n               </Button>\n            </div>\n         </div>\n      </Tween>\n   );\n};\n","/Volumes/Data/React/lexus/src/components/ChatScreen/BotReply/BotReply.js",[],"/Volumes/Data/React/lexus/src/components/DynamicForm/Submit/Submit.js",[],"/Volumes/Data/React/lexus/src/components/DynamicForm/Username/Username.js",[],"/Volumes/Data/React/lexus/src/components/DynamicForm/Gender/Gender.js",[],"/Volumes/Data/React/lexus/src/components/DynamicForm/Email/Email.js",[],"/Volumes/Data/React/lexus/src/components/DynamicForm/PhoneNumber/PhoneNumber.js",[],"/Volumes/Data/React/lexus/src/components/DynamicForm/Date/Date.js",[],"/Volumes/Data/React/lexus/src/components/Header/Header.js",[],"/Volumes/Data/React/lexus/src/serviceWorker.js",[],{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","severity":1,"message":"176","line":11,"column":1,"nodeType":"177","endLine":135,"endColumn":3},{"ruleId":"175","severity":1,"message":"176","line":5,"column":1,"nodeType":"177","endLine":173,"endColumn":3},{"ruleId":"175","severity":1,"message":"176","line":4,"column":1,"nodeType":"177","endLine":16,"endColumn":3},{"ruleId":"175","severity":1,"message":"176","line":5,"column":1,"nodeType":"177","endLine":55,"endColumn":3},{"ruleId":"175","severity":1,"message":"176","line":3,"column":1,"nodeType":"177","endLine":11,"endColumn":3},{"ruleId":"175","severity":1,"message":"176","line":5,"column":1,"nodeType":"177","endLine":45,"endColumn":3},{"ruleId":"175","severity":1,"message":"176","line":16,"column":1,"nodeType":"177","endLine":115,"endColumn":3},{"ruleId":"175","severity":1,"message":"176","line":7,"column":1,"nodeType":"177","endLine":19,"endColumn":3},{"ruleId":"175","severity":1,"message":"176","line":11,"column":1,"nodeType":"177","endLine":22,"endColumn":3},{"ruleId":"175","severity":1,"message":"176","line":5,"column":1,"nodeType":"177","endLine":40,"endColumn":3},{"ruleId":"178","severity":1,"message":"179","line":3,"column":10,"nodeType":"180","messageId":"181","endLine":3,"endColumn":13},{"ruleId":"178","severity":1,"message":"182","line":1,"column":27,"nodeType":"180","messageId":"181","endLine":1,"endColumn":36},{"ruleId":"178","severity":1,"message":"183","line":1,"column":38,"nodeType":"180","messageId":"181","endLine":1,"endColumn":49},{"ruleId":"175","severity":1,"message":"176","line":13,"column":1,"nodeType":"177","endLine":109,"endColumn":3},"no-native-reassign",["184"],"no-negated-in-lhs",["185"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'get' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useCallback' is defined but never used.","no-global-assign","no-unsafe-negation"]